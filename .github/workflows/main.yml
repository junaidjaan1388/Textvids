- name: Create optimized test script
  run: |
    cat > test_generation_optimized.py << 'EOF'
    import torch
    import os
    import sys
    import numpy as np
    import zipfile
    from PIL import Image
    import imageio
    
    sys.path.append('.')
    
    # [Previous mock imports and functions remain the same...]
    
    def create_optimized_zip(video_tensor, prompt, width, height, frames, seed, output_zip="video_output.zip"):
        """Create optimized ZIP with video, frames, and metadata"""
        with zipfile.ZipFile(output_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
            
            # 1. Save video as MP4 directly to ZIP
            mp4_data = save_video_to_memory(video_tensor)
            zipf.writestr("generated_video.mp4", mp4_data)
            
            # 2. Save a few sample frames as preview
            preview_frames = save_sample_frames_to_memory(video_tensor, num_frames=5)
            for i, frame_data in enumerate(preview_frames):
                zipf.writestr(f"preview_frames/frame_{i:04d}.png", frame_data)
            
            # 3. Add metadata
            metadata = f"""Generated Video Metadata
            ======================
            Prompt: {prompt}
            Resolution: {width}x{height}
            Frames: {frames}
            Seed: {seed}
            Video Shape: {video_tensor.shape}
            FPS: 24
            Duration: {frames/24:.2f} seconds
            Generated by: WanT2V Model
            """
            zipf.writestr("metadata.txt", metadata)
            
            # 4. Add generation info
            info = f"Generation completed successfully at {os.times().elapsed} seconds"
            zipf.writestr("generation_info.txt", info)
        
        print(f"Optimized ZIP created: {output_zip}")
        return output_zip

    def save_video_to_memory(video_tensor, fps=24):
        """Save video to memory buffer"""
        import io
        video_np = video_tensor.cpu().numpy()
        video_np = (video_np - video_np.min()) / (video_np.max() - video_np.min()) * 255
        video_np = video_np.astype(np.uint8)
        video_np = video_np.transpose(1, 2, 3, 0)
        
        buffer = io.BytesIO()
        with imageio.get_writer(buffer, format='mp4', fps=fps) as writer:
            for frame in video_np:
                writer.append_data(frame)
        
        return buffer.getvalue()

    def save_sample_frames_to_memory(video_tensor, num_frames=5):
        """Save sample frames to memory"""
        import io
        frames_data = []
        video_np = video_tensor.cpu().numpy()
        video_np = (video_np - video_np.min()) / (video_np.max() - video_np.min()) * 255
        video_np = video_np.astype(np.uint8)
        
        frame_indices = np.linspace(0, video_np.shape[1]-1, num_frames, dtype=int)
        
        for idx in frame_indices:
            frame = video_np[:, idx]  # (C, H, W)
            frame = frame.transpose(1, 2, 0)  # (H, W, C)
            img = Image.fromarray(frame)
            
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            frames_data.append(buffer.getvalue())
        
        return frames_data

    # [Rest of the main function...]
    EOF
